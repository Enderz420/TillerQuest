datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  NEW
  USER
  ADMIN
}

enum SchoolClass {
  IM1
  IM2
  IM3
  IM4
  IT1
  IT2
  IT3
  MP1
  MP2
  MP3
}

enum Class {
  Druid
  Wizard
  Barbarian
}

enum AbilityType {
  Deathsave
  Health
  Mana
  // Experience // This is considered as a passive ability. Requires larges changes in the codebase
  Strength
  Agility
  Trickery
  Magic
  Heal

  // Class specific types
  Druid
  Wizard
  Barbarian
}

model User {
  id          String       @id @default(cuid())
  name        String?
  username    String?      @unique
  lastname    String?
  title       String?      @default("Newborn")
  schoolClass SchoolClass?
  class       Class?
  image       String?

  level     Int      @default(1)
  xp        Int      @default(1)
  xpToLevel Int      @default(100)
  hp        Int      @default(40)
  hpMax     Int      @default(40)
  mana      Int      @default(0)
  manaMax   Int      @default(40)
  lastMana  DateTime @default(now()) // Last time user recieved mana in ISO 8601 date-time format. User should not get more mana on account creation. 

  gemstones Int @default(1)
  gold      Int @default(0)

  abilities UserAbility[] // m-n relation to abilities. A user can have many abilities
  // abilityNames String[]

  effects EffectsOnUser[]
  // m-n relation to effects on users. A user can have many effects
  // effectId String[] @db.ObjectId

  guild     Guild?  @relation(fields: [guildName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  guildName String?

  role UserRole @default(NEW)

  email         String?   @unique
  emailVerified DateTime?
  accounts      Account[] // Relation to OAuth account
  // sessions      Session[]      FIXME: Removed?
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Authenticator Authenticator[]
  // Session   Session[]          FIXME: Removed?
  Session   Session[]
}

model Guild {
  name String @id

  members User[]
}

// current limitations with prisma studio make the admin unable to add new records in models with many-to-many relationships
// https://github.com/prisma/studio/issues/980
model Ability {
  name         String      @id @default(cuid())
  type         AbilityType // Can be generic or class specific
  isPassive    Boolean     @default(false)
  description  String?
  duration     Int?
  icon         String?
  gemstoneCost Int         @default(1)
  manaCost     Int?        @default(2)
  xpGiven      Int?        @default(0)
  value        Int?

  parentAbility String? // m-n relation to parent abilities. An ability can have many parent abilities
  parent        Ability?  @relation("AbilityHierarchy", fields: [parentAbility], references: [name], onDelete: NoAction, onUpdate: NoAction)
  // childAbilities String[] // m-n relation to child abilities. An ability can have many child abilities
  children      Ability[] @relation("AbilityHierarchy")

  users       UserAbility[] // m-n relation to users. A ability can owned by many users 
  userEffects EffectsOnUser[] // m-n relation to effects on users. An ability can have effects on many users 
}

// relational model to explicitly manage the M-N relationship between User and Ability
model UserAbility {
  id          String  @id @default(cuid())
  userId      String
  abilityName String
  user        User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ability     Ability @relation(fields: [abilityName], references: [name], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, abilityName])
}

// model Effect {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   userIds     String[] @db.ObjectId
//   abilityName String?
//   value       Int?

//   ability Ability? @relation(fields: [abilityName], references: [name])
//   // cosmic

//   onUser EffectsOnUser[] // m-n relation to users. An effect can have many users
// }

// relational model to explicitly manage the M-N relationship between User and Ability
model EffectsOnUser {
  id          String      @id @default(cuid())
  userId      String
  abilityName String?
  effectType  AbilityType
  endTime     DateTime?
  value       Int?

  user    User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ability Ability? @relation(fields: [abilityName], references: [name], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, abilityName])
}

// 3rd party authentication. OAuth
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@unique([identifier, token])
// }

// // Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @id @map("_id")
//   userId               String  @db.ObjectId
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId, credentialID])
// }
