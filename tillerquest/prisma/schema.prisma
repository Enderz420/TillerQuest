// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  NEW
  USER
  ADMIN
}

// Original:
// Seid, viking, druwid, narr, 
enum Class {
  Cleric
  Druid
  // Fighter
  Mage
  Paladin
  Rogue
  // Hunter
  Shaman
  Warlock
  Warrior
  Wizard
  Deathknight
}


model User {
  id            String    @id @default(cuid())
  name          String?
  lastname      String?
  email         String?   @unique
  username      String?   @unique
  title         String?   @default("Newborn")
  class         Class?
  image         String?
  level         Int       @default(1)
  xp            Int       @default(1)
  hp            Int       @default(40)
  hpMax         Int       @default(40)
  mana          Int       @default(0)
  manaMax       Int       @default(40)
  lastMana      String    @default("") // Last time user recieved mana. User should not get more mana on account creation
  runes         Int       @default(1)
  gold          Int       @default(0)
  abilities     AbilitiesOnUsers[] // A user can have many abilities
  clanName      String?
  emailVerified DateTime?
  role          UserRole   @default(NEW) // A new user starts with role NEW, then changes to USER
  accounts      Account[] // Relation to Github account

  clan          Clan?       @relation(fields: [clanName], references: [name], onUpdate: Cascade, onDelete: Cascade)
}

// Github account
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Ability {
  name             String @id
  type             String? // Passive, Aura, Heal, Buff, Debuff, etc
  description      String
  duration         Int?
  icon             String?
  cost             Int
  xpGiven          Int
  value            Int?
  user             AbilitiesOnUsers[] // An ability can belong to many users ????
}

// relational table for abilities and users
// should only exist if the user has the ability
model AbilitiesOnUsers {
  user          User @relation(fields: [userId], references: [id])
  userId        String
  effect        Ability @relation(fields: [abilityName], references: [name])
  abilityName   String
  endTime       DateTime?
  currentValue  Int?

  @@id([userId, abilityName])
}

//FIXME: Redundant?
// model Effect {
//   name             String @id
//   // add relation to ability?
//   type             String? 
//   icon             String?
//   // endTime          DateTime?
//   value            Int?
//   user             EffectsOnUsers[] // An effect can belong to many users ????
// }

model Clan {
  name            String @id
  members         User[] 
}

model CosmicEvent {
  id              Int @id @default(autoincrement())
  name            String @unique
  description     String
  dateRevealed    String? @unique // TODO: Check if need change
  timesUsed       Int @default(0)
  recommendedDateStart String?
  recommendedDateEnd String?
}

//user titles
model Title {
  name  String @id
  cost Int
  //tastaturkriger

}

// npx prisma generate
// npx prisma db push

//npx prisma studio